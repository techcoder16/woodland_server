// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


enum Role {
  Admin 
  User
  Reseller


}


model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  usertype          String?
  type              String?
  email             String?  @unique
  
  Title             String?  // Remove the @unique if you want to allow duplicates
  first_name        String?
  last_name         String?
  password          String?
  salutation        String?
  post_code         String?
  Address           String?
  Town              String?

  Country           String?
  phone_number      Float?   // This can be changed to String if you want to support formats with symbols
  fax               Float?
  date_of_birth     DateTime?
  website           String?
  pager             String?
  birth_place       String?
  nationality       String?
  passport          String?
  accpet_LHA_DWP    String?
  internal_info     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}




model property{
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  for               String?
  category          String?
  propertyType     String?
  internalReference String?
  price             String?
  priceQualifier    String?
  tenure            String?
  contractType      String?
  salesFee          String?
  postCode          String
  propertyNo        String?
  propertyName      String?
  addressLine1      String?
  addressLine2      String?
  town              String?
  county            String?
  country           String
  latitude          String?
  longitude         String?
  development       String?
  yearOfBuild       String?
  parking           String?
  garden            String?
  livingFloorSpace  String?
  meetingRooms      String?
  workStation       String?
  landSize          String?
  outBuildings      String?
  propertyFeature   String[]
  Tags              String?
  shortSummary      String?
  fullDescription   String?
  rooms             Json     // Stores an array of objects [{ title, description, dimensions }]
  Solicitor         String?
  GuaranteedRentLandlord String?
  Branch            String?
  Negotiator        String?
  whodoesviewings   String?
  comments          String?
  sva               String?
  tenureA            String?
  customGarden      String?
  customParking      String?
  pets              String?
  train             String?
  occupant          String?
  occupantEmail    String?
  occupantMobile     String?
  moreInfo          String?
  council           String?
  councilBrand           String?
  freeholder        String?
  freeholderContract  String?
  freeholderAddress   String?
  nonGasProperty    Boolean?
  Insurer           String?
  photographs          String     
  floorPlans           String      
  epcChartOption       String
  currentEERating      String?            // Expected to be 0-100 if "ratings" is selected
  potentialEERating    String?            // Expected to be 0-100 if "ratings" is selected
  epcChartFile         String?         // URL for the uploaded EPC chart (.jpg)
  epcReportOption      String
  epcReportFile        String?         // URL for the uploaded PDF report
  epcReportURL         String?         // Report URL if provided
  videoTourDescription String?
  showOnWebsite        Boolean?
  attachments      String[]
  publishOnWeb      String?
  status            String?
  detailPageUrl     String?
  publishOnPortals  String?
  portalStatus      String?
  forA              String?
  propertyTypeA      String?
  newHome           Boolean?
  offPlan           Boolean?
  virtualTour       String?
  enterUrl          String?
  virtualTour2      String?
  enterUrl2         String?
  propertyBrochureUrl  String?
  AdminFee        String?
  ServiceCharges  String?
  minimumTermForLet String?
  annualGroundRent  String?
  lengthOfLease     String?
  shortSummaryForPortals String?
  fullDescriptionforPortals String?
  sendToBoomin        Boolean?
  sendToRightmoveNow  Boolean?
  CustomDisplayAddress  String?
  transactionType String?
  sendToOnTheMarket Boolean?
  newsAndExclusive Boolean?
  selectPortals  String[]
  vendorId String? @db.ObjectId 
  vendor            vendor?  @relation(fields: [vendorId], references: [id])

  // Relationships
  parties                     PropertyParty[]
  leases                      Lease[]
  rent                        Rent[]
  
  managementAgreement        ManagementAgreement[]
  tenancyAgreement          TenancyAgreement[]
  transactions                Transaction[]
  notes                       Note[]
  histories                   History[]
  meters                      Meter[]
  additionalFeatures          AdditionalPropertyFeature[]
  supplier                    Supplier[]

  
}

model Tenant{
id         String    @id @default(auto()) @map("_id") @db.ObjectId
  
title String?
FirstName  String?
SureName String?
MobileNo String?
HomePhone String?
WorkPhone String?
Email String?
EmployeeName String?
BankAccountNo String?
SortCode String?
BankName String?
IDCheck String?

 

PropertyParty PropertyParty[]
}
model PropertyParty {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId

  property   property  @relation(fields: [propertyId], references: [id])
  propertyId String    @db.ObjectId
 
  Tenant     Tenant? @relation(fields: [Tenantid], references: [id])
  Tenantid String? @db.ObjectId
  vendor      vendor     @relation(fields: [VendorId], references: [id])
  VendorId    String    @db.ObjectId
  
}


model Rent {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  property   property  @relation(fields: [propertyId], references: [id])
   propertyId String    @db.ObjectId
  Amount Int
  ReceivedOn  DateTime
  HoldBy String
  ReturnedOn DateTime
  DateOfAgreement DateTime
  Deposit Json
  NoOfOccupant Int
  DssRef String
  HowFurnished String
  Note String

}

model Supplier{

  id             String    @id @default(auto()) @map("_id") @db.ObjectId
    property   property  @relation(fields: [propertyId], references: [id])
   propertyId String    @db.ObjectId
  electricitySupplier String
  electricityPhone String
  electricityMeterNo String
  electricityReadingOne String
  electricityReadingTwo String
  gasSupplier String
  gasPhone String
  gasMeterNo String
  gasReadingOne String
  gasReadingTwo String
    WaterSupplier String
  WaterPhone String
  WaterMeterNo String
  WaterReadingOne String
  WaterReadingTwo String
    BoroughSupplier String
  BoroughPhone String
  BoroughMeterNo String
  BoroughReadingOne String
  BoroughReadingTwo String



  Phone String
  inventory Json


}


model Lease {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  property       property  @relation(fields: [propertyId], references: [id])
  propertyId     String    @db.ObjectId
  tenantId       String    @db.ObjectId

  landlordId     String    @db.ObjectId
  rent           Float
  deposit        Float
  agreementDate  DateTime?  // Date when the rent agreement was signed (if applicable)
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Meter {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  property        property  @relation(fields: [propertyId], references: [id])
  propertyId      String    @db.ObjectId
  meterType       MeterType
  reading         Float?
  lastReadingDate DateTime?
}

model TenancyAgreement {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  property    property  @relation(fields: [propertyId], references: [id])
  propertyId  String    @db.ObjectId

  tenantId    String   
  details     String
  housingAct String
  LetterType String
  TermsandCondition String
  Guaranteer String
  Address1 String
Address2 String
HideLandlordAdress Boolean

  signedDate  DateTime?
}

model ManagementAgreement{
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  property    property  @relation(fields: [propertyId], references: [id])
  propertyId  String    @db.ObjectId

  DateofAgreement DateTime
  AgreementStart DateTime
  PaymentAgreement DateTime
  AgreementEnd DateTime
    Frequency Int
InventoryCharges Float
ManagementFees Float
TermsAndCondition String




}
model Transaction {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  property        property         @relation(fields: [propertyId], references: [id])
  propertyId      String           @db.ObjectId
  amount          Float
  transactionDate DateTime
  type            TransactionType
  description     String?
}

model Note {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  property   property  @relation(fields: [propertyId], references: [id])
  propertyId String    @db.ObjectId
  content    String
  createdAt  DateTime  @default(now())
}

model History {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  property   property  @relation(fields: [propertyId], references: [id])
  propertyId String    @db.ObjectId
  action     String    // Describes what occurred (e.g. "Rent updated", "Agreement signed")
  timestamp  DateTime  @default(now())
}

model AdditionalPropertyFeature {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  property    property @relation(fields: [propertyId], references: [id])
  propertyId  String   @db.ObjectId
  featureType String   // e.g. "bed", "garden", etc.
  value       String?
  towns       String?
  PostCode    String?
  noOfDeds    String?
  NoOfWC      String?
  NoOfReceptions String?
  NoOfCookRooms String?
  Garden      String?
  Carpeting   String?
  GasControlMeeting String?
  DoubleGazing String?
  OffStreetParking Boolean?
  Garage  String?
  keyNumber Float?
  Type String?
  HowDeattached String?
  Floor String?
  DoorNumber String?

  Road String?
  map String[]
}

enum PartyRole {
  TENANT
  LANDLORD
  SUPPLIER
  OTHER
}

enum MeterType {
  ELECTRIC
  GAS
  WATER
}

enum TransactionType {
  RENT
  DEPOSIT
  FEE
  OTHER
}


model vendor {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  landlord          Boolean?
  vendor            Boolean?
  type              String
  title             String
  firstName         String
  lastName          String
  company           String?
  salutation        String?
  postCode          String
  addressLine1      String
  addressLine2      String?
  town              String?
  country           String?
  phoneHome         String?
  negotiator        String?
  phoneWork         String?
  website           String?
  phoneMobile       String?
  fax               String?
  email             String?
  pager             String?
  birthplace        String?
  nationality       String?
  passportNumber    String?
  acceptLHA         String?
  dnrvfn            Boolean?
  label             String?
  status            String?
  branch            String?
  source            String?
  ldhor             Boolean?
  salesFee          String?
  managementFee     String?
  findersFee        String?
  salesFeeA         String?
  managementFeeA    String?
  findersFeeA       String?
  nrlTax            String?
  nrlRef            String?
  nrlRate           String?
  vatNumber         String?
  landlordFullName  String?
  landlordContact   String?
  comments          String?
  otherInfo         String?
  bankBody          String?
  bankAddressLine1  String?
  bankAddressLine2  String?
  bankTown          String?
  bankPostCode      String?
  bankCountry       String?
  bankIban          String?
  bic               String?
  nib               String?
  accountOption     String
  username          String?
  password          String?
  existingUsername  String?
  attachments       String[] // This makes attachments an array of strings (paths or URLs)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  property property[]
  
parties PropertyParty[]
}



